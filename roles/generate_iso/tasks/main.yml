# --- Setup basic paths used throughout the build ---
- name: Set image and ISO paths as facts
  set_fact:
    image_path: "{{ playbook_dir }}/build/image"
    chroot_path: "{{ playbook_dir }}/build/chroot"
    iso_output: "{{ playbook_dir }}/build/{{ ISO_NAME | default('cloudify.iso') }}"

- name: Print resolved paths
  debug:
    msg:
      - "Image Path: {{ image_path }}"
      - "Chroot Path: {{ chroot_path }}"
      - "ISO Output: {{ iso_output }}"

# --- Clean up previous squashfs if it exists to ensure fresh rebuild ---
- name: Remove existing filesystem.squashfs to force rebuild
  file:
    path: "{{ image_path }}/casper/filesystem.squashfs"
    state: absent

# -------------------------------------------
# Step 1: Create compressed root filesystem
# -------------------------------------------

- name: Create SquashFS from chroot with compression
  command: >
    mksquashfs {{ chroot_path }} {{ image_path }}/casper/filesystem.squashfs
    -noappend -wildcards -comp xz -e boot
  when: not SKIP_COMPRESSION | bool
  args:
    creates: "{{ image_path }}/casper/filesystem.squashfs"

- name: Create uncompressed SquashFS from chroot (debug mode)
  command: >
    mksquashfs {{ chroot_path }} {{ image_path }}/casper/filesystem.squashfs
    -noappend -wildcards -noI -noD -noF -e boot
  when: SKIP_COMPRESSION | bool
  args:
    creates: "{{ image_path }}/casper/filesystem.squashfs"


- name: Calculate chroot filesystem size in bytes
  shell: du -sx --block-size=1 "{{ chroot_path }}" | cut -f1
  register: fs_size

- name: Write filesystem.size metadata file (used by bootloader)
  copy:
    dest: "{{ image_path }}/casper/filesystem.size"
    content: "{{ fs_size.stdout }}"

# --------------------------------------------------------
# Step 2: Prepare BIOS boot files (ISOLINUX + modules)
# --------------------------------------------------------

- name: Copy required ISOLINUX and Syslinux BIOS modules to ISO
  copy:
    remote_src: true
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { src: "/usr/lib/ISOLINUX/isolinux.bin", dest: "{{ image_path }}/isolinux/isolinux.bin" }
    - { src: "/usr/lib/syslinux/modules/bios/ldlinux.c32", dest: "{{ image_path }}/isolinux/ldlinux.c32" }
    - { src: "/usr/lib/syslinux/modules/bios/libcom32.c32", dest: "{{ image_path }}/isolinux/libcom32.c32" }
    - { src: "/usr/lib/syslinux/modules/bios/vesamenu.c32", dest: "{{ image_path }}/isolinux/vesamenu.c32" }
    - { src: "/usr/lib/syslinux/modules/bios/libutil.c32", dest: "{{ image_path }}/isolinux/libutil.c32" }

- name: Create empty boot.cat (required by ISOLINUX for BIOS boot)
  file:
    path: "{{ image_path }}/isolinux/boot.cat"
    state: touch
    mode: '0644'

# -----------------------------------------------
# Step 3: Create ISOLINUX configuration for BIOS
# -----------------------------------------------

- name: Write ISOLINUX boot menu configuration (isolinux.cfg)
  copy:
    dest: "{{ image_path }}/isolinux/isolinux.cfg"
    content: |
      UI vesamenu.c32
      DEFAULT live
      PROMPT 0
      TIMEOUT 50

      MENU TITLE Cloudify OS Boot Menu

      LABEL live
          MENU LABEL Try Cloudify OS
          KERNEL /casper/vmlinuz
          APPEND initrd=/casper/initrd boot=casper console=ttyS0,115200n8
    mode: '0644'

# ---------------------------------------------------
# Step 4: Create EFI boot image (for UEFI systems)
# ---------------------------------------------------

- name: Generate standalone GRUB EFI boot binary (bootx64.efi)
  command: >
    grub-mkstandalone
    --format=x86_64-efi
    --output={{ image_path }}/bootx64.efi
    --locales=""
    --fonts=""
    "boot/grub/grub.cfg={{ image_path }}/isolinux/isolinux.cfg"

- name: Create blank efiboot.img file (20MB FAT image)
  command: dd if=/dev/zero of={{ image_path }}/efiboot.img bs=1M count=20
  args:
    creates: "{{ image_path }}/efiboot.img"

- name: Format efiboot.img as FAT filesystem
  command: mkfs.vfat {{ image_path }}/efiboot.img

- name: Create required EFI/BOOT directories inside efiboot.img
  command: mmd -i {{ image_path }}/efiboot.img ::/EFI ::/EFI/BOOT

- name: Copy bootx64.efi into efiboot.img under EFI/BOOT
  command: >
    mcopy -vi {{ image_path }}/efiboot.img
    {{ image_path }}/bootx64.efi ::/EFI/BOOT/

# ---------------------------------------------------------
# Step 5: Generate final ISO image (BIOS + UEFI bootable)
# ---------------------------------------------------------
- name: Print ISO build paths for debug
  debug:
    msg:
      - "ISO output path: {{ iso_output }}"
      - "ISO image source path: {{ image_path }}"

- name: Generate hybrid ISO with xorriso (supports BIOS + UEFI)
  command: >
    xorriso -as mkisofs
    -iso-level 3
    -full-iso9660-filenames
    -volid "Cloudify_OS"
    -output "{{ iso_output }}"
    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin
    -c isolinux/boot.cat
    -b isolinux/isolinux.bin
        -no-emul-boot -boot-load-size 4 -boot-info-table
    -eltorito-alt-boot
    -e efiboot.img
        -no-emul-boot
    -isohybrid-gpt-basdat
    "{{ image_path }}"
